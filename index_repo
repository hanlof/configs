#!/bin/bash

set -f
FILEPATTERNS=(
  *.asm
  *.cpp
  *.hpp
  *.sig
  *.c
  *.h
  *.cc
  *.py
)
set +f

GITTOP=$(git rev-parse --show-toplevel)
if [ "$?" != 0 -o "$GITTOP"x == x ]; then
  echo Please enter a git repo first
  exit 1
fi

echo Building index for the following file patterns: "${FILEPATTERNS[@]}"

GIT_COMMIT=$(git show-ref --head --heads HEAD -s)

CSCOPE=$(which cscope)
CSCOPE_RETVALUE=$?

CTAGS=$(which ctags)
CTAGS_RETVALUE=$?

#this is fed to into the git submodule foreach command
printf -v QUOTED_PATTERNS "%q " "${FILEPATTERNS[@]}"
FOREACH_CMD="git ls-files $QUOTED_PATTERNS"

export GITTOP
if [ $CSCOPE_RETVALUE == 0 ]; then

  :
  #time git ls-files ${GITTOP}/*.asm ${GITTOP}/*.[ch]pp ${GITTOP}/*.sig ${GITTOP}/*.[ch] ${GITTOP}/*.cc | cscope -k -b -u -q -f ${GITTOP}/.git/cscope.out -i -
  #git ls-files "${FILEPATTERNS[@]/#/${GITTOP}/}" | cscope -k -b -u -q -f ${GITTOP}/.git/cscope.out -i -
  #echo ${GIT_COMMIT} > ${GITTOP}/.git/cscope.githash
fi

# XXX one big index in the super-repo or a small index in each subrepo?
# - fugitive assumes tag file is in "gitdir" if editing a file in a subrepo
#   in other words it will not use the tags from the superrepo but rather look under <superrepo>/.git/modules/...
# - could create symlinks in all subrepos? would it work or would the relative paths be wrong?
# XXX should there be separate tags file for different languages? this is natively supported by fugitive
# TODO check for correct version of ctags
# TODO incremental updates!
# - maybe do it using multiple tags files to avoid sorting a really huge tag file
# - investigtae how vim handles that performance-wise
if [ $CTAGS_RETVALUE == 0 ]; then
  # looks like submodules are working now. printf %q FTW!
  git submodule foreach --recursive "${FOREACH_CMD} | ctags --tag-relative=yes --totals --sort=no --append -L - -o ${GITTOP}/.git/tags" 2>&1 | {
    IFS=" (),'"
    let tot_tags=0
    let tot_lines=0
    let tot_files=0
    let tot_kb=0
    printf $'Tags: %-8d Lines: %-8d Files: %-8d Kb: %10d\n\n' $tot_tags $tot_lines $tot_files $tot_kb
    read entering tmp
    while [ 1 == 1 ]; do
      read files tmp lines _ kb _ _ _ time _ kbs
      if [ $? -ne 0 ]; then
        break
      fi
      if [ "$files"x == "Entering"x ]; then
        echo ${tmp}
        continue
      fi
      read tags _ _ _ _ _ _ tagstot _
      let tot_tags+=$tags
      let tot_lines+=$lines
      let tot_files+=$files
      let tot_kb+=$kb
      tput cuu1; tput el; tput el1; tput cuu1; tput el; tput el1
      printf $'Tags: %-8d Lines: %-8d Files: %-8d Kb: %10d\n' $tot_tags $tot_lines $tot_files $tot_kb

      #echo tags:$tags tagstot:$tagstot files:$files lines:$lines kb:$kb time:$time kbs:$kbs;
    done
  }
  git ls-files "${FILEPATTERNS[@]/#/${GITTOP}/}" | ctags --tag-relative=yes --totals --sort=yes --append -L - -o ${GITTOP}/.git/tags
  echo ${GIT_COMMIT} > ${GITTOP}/.git/tags.githash
fi

