set nocp

set laststatus=2
set ruler
set statusline=%<%f\ %h%m%r%=%n\ %-14.(%l,%c%V%)\ %P
set showcmd

let g:clang_auto=0
let g:clang_verbose_pmenu=1
let g:clang_c_completeopt="longest,menuone,preview"

let rtcmd="set runtimepath+=" . expand("<sfile>:h")
exec rtcmd
exec rtcmd . "/../submodules/vim-fugitive"
exec rtcmd . "/../submodules/vim-clang"


if has('gui_running')
    let gvimrcpath=expand("<sfile>:h") . "/gvimrc"
    exec "source " . gvimrcpath
endif

" never use tabs. insert spaces
"set noexpandtab
" big steps when tabbing (2 is too small difference from using spaces)
"set softtabstop=4
" i want 2 spaces to be the standard indentation
"set shiftwidth=2
" tabs are 8 characters. make them visible by coloring them in .gvimrc

highlight TrailingSpace ctermbg=red guibg=#ff0000

" define tab stuff in language specific files like after/ftplugin/c.vim etc
set tabstop=8
set backspace=2

set splitright

set foldmethod=syntax
set foldcolumn=2
set foldlevel=10

set ignorecase
set smartcase

filetype on
filetype plugin on
filetype indent on

" vims defaults are mostly sane but for switch cases we must let it know whats correct
set cinoptions=l1

" syntax plugin options!
let g:is_bash = 1
let g:load_doxygen_syntax = 1
syn on

"this must be set in after/ftplugin/c.vim to be effective
"set formatoptions-=ro

set sessionoptions+=resize,localoptions

set autowrite

set wildmenu

runtime ftplugin/man.vim

set listchars=tab:â€£\ 
set list

function! g:ToggleListCharsEOL()
  let oldval = &listchars
  if match(oldval, 'eol') > -1
    exec 'set listchars-=eol:$'
  else
    exec 'set listchars+=eol:$'
  endif
endfunction

call matchadd("Error", "\\s\\+$") " whitespace at EOL is bad
call matchadd("Error", " \\+\t")  " space before tab is bad
" TODO: disable/enable EOL-space error while typing (?)

nnoremap <F12> :set hls!<CR>
inoremap <F12> <C-o>:set hls!<CR>
nnoremap <expr> <S-F12> g:ToggleListCharsEOL()
inoremap <expr> <S-F12> g:ToggleListCharsEOL()
nnoremap <C-F12> :set spell!<CR>
inoremap <C-F12> <C-o>:set spell!<CR>
nnoremap <F11> :setlocal number!<CR>
nnoremap <S-F11> :setlocal relativenumber!<CR>
nnoremap <C-F11> :setlocal wrap!<CR>

nnoremap <C-S-F11> :setlocal buftype=nofile<CR>

nnoremap <F9> :make!<CR>
inoremap <F9> <C-o>:make!<CR><CR>
nnoremap <F7> :cprev<CR>
inoremap <F7> <C-o>:cprev<CR>
nnoremap <F8> :cnext<CR>
inoremap <F8> <C-o>:cnext<CR>

map <F2>g :cs find g <cword><CR>
map <F2>s :cs find s <cword><CR>
map <F2>c :cs find c <cword><CR>
map <F2>t :cs find t <cword><CR>
map <F2>d :cs find d <cword><CR>

map <Leader>G :tab split +:Ggrep\ <cword><CR>
map <Leader>g :tab split +:Ggrep\\\ 

map <F3> :call DmenuOpen("edit")<CR>
map <S-F3> :call DmenuOpen("vsplit")<CR>
map <C-F3> :call DmenuOpen("tabedit")<CR>
map <F4> :call DmenuTag("tag")<CR>
map <S-F4> :call DmenuTag("tjump")<CR>

map <F6> :let kalle="vert stag ".expand('<cword>')<CR>:exec kalle<CR>
map <S-F6> :let kalle="tab stag ".expand('<cword>')<CR>:exec kalle<CR>

cmap <F8> <C-r>=g:GitTop<CR>

nnoremap <S-F7> :set foldlevel-=1<CR>
nnoremap <S-F8> :set foldlevel+=1<CR>
nnoremap <C-S-F7> :set foldlevel=0<CR>
nnoremap <C-S-F8> :set foldlevel=99<CR>

vnoremap <F5>          <Esc>/<C-R>=GetSel()<CR><CR>
function! GetSel()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  if lnum1 != lnum2
    echo 'Multi line'
    return ""
  endif
  let sel = getline(lnum1)[ col1 - 1: col2 - 1]
  return sel
endfunction

set includeexpr=g:IncludeExprExample(v:fname)
function! g:IncludeExprExample(in)
  let top = g:GitTopLevel(fnamemodify('.', ':p:s?[\/]$??'))
  let t2=substitute(a:in,'^b/',top,'g')
  let t=substitute(t2,'^a/',top,'g')
"  let t2=substitute(t,'^/',top . '/','g')
  return t2
endfunction

let g:dmenucmd="~/configs/submodules/dmenu/dmenu"
function g:DmenuOptions()
  return " -i -l 50 -p '' -w " . v:windowid
endfunction

".../ctags-5.8/readtags -t .git/tags -l |
" Find a tag and pass it to cmd
function! DmenuTag(cmd)
  let top = g:GitTopLevel(fnamemodify('.', ':p:s?[\/]$??'))
  let fname = system("~/configs/c-programs/dumptags -t " . top . "/.git/tags -l | " . g:dmenucmd . g:DmenuOptions())

"  Xlib:  extension "XINERAMA" missing on display ":1011.0"
  let fname2 = substitute(fname, '\n$', '', '')
  " first substitute in the case of two "lines" (<CR> or NULL character present at the end)
  let fname = substitute(fname2, "Xlib:  extension \"XINERAMA\" missing.*\".*.\"\..", '', '')
  " the first pattern will not cover the case of one line, hence another substitute
  let fname = substitute(fname, "Xlib:  extension \"XINERAMA\" missing.*\".*.\"\.", '', '')

  if empty(fname)
    return
  endif

  execute a:cmd . " " . split(fname, " ")[0]
endfunction

" Find a file and pass it to cmd
function! DmenuOpen(cmd)
  let top = g:GitTopLevel(fnamemodify('.', ':p:s?[\/]$??'))
  let fname = system("git ls-files --full-name " . top . " | " . g:dmenucmd . g:DmenuOptions())

"  Xlib:  extension "XINERAMA" missing on display ":1011.0"
  let fname2 = substitute(fname, '\n$', '', '')
  " first substitute in the case of two "lines" (<CR> or NULL character present at the end)
  let fname = substitute(fname2, "Xlib:  extension \"XINERAMA\" missing.*\".*.\"\..", '', '')
  " the first pattern will not cover the case of one line, hence another substitute
  let fname = substitute(fname, "Xlib:  extension \"XINERAMA\" missing.*\".*.\"\.", '', '')

  if empty(fname)
    return
  endif
  execute a:cmd . " " . top . "/" . fname
endfunction

" get git top-level dir
function! g:GitTopLevel(path) abort
  let fn = fnamemodify(a:path,':s?[\/]$??')
  let ofn = ""
  let nfn = fn
  while fn != ofn
    if filereadable(fn . '/.git/HEAD')
      return fn
    endif
    let ofn = fn
    let fn = fnamemodify(ofn,':h')
  endwhile
  return ''
endfunction

let g:GitTop = g:GitTopLevel(fnamemodify('.', ':p:s?[\/]$??'))
if g:GitTop != ''
  exec 'set path+=' . g:GitTop
endif

cscope add /repo/hans/slask/.git/cscope.out /repo/hans/slask
set cscopequickfix=s-,c-,d-,i-,t-,e-

function! g:IsMergetool()
  if &diff == 0
    return 0
  endif
  if match(argv(0), 'LOCAL') == -1
    return 0
  endif
  if argc() == 3
    if match(argv(1), 'REMOTE') == -1
      return 0
    endif
  elseif argc() == 4
    if match(argv(1), 'BASE') == -1
      return 0
    endif
    if match(argv(2), 'REMOTE') == -1
      return 0
    endif
  else
    return 0
  endif
  return 1
endfunction

function! g:SetupMergetool()
  " assume we are in the "MERGED" window when this function is called
  nnoremap <F9> :diffget LOCAL<CR>
  nnoremap <F10> :diffget BASE<CR>
  nnoremap <F11> :diffget REMOTE<CR>
  setlocal statusline=%<%f\ %h%m%r%=F9=LOCAL\ F10=BASE\ F11=REMOTE\ [%n/%{len(filter(range(1,bufnr('$')),'buflisted(v:val)'))}]\ %-14.(%l,%c%V%)\ %P
  vimgrep /=======/ %
endfunction

if g:IsMergetool()
  " postpone setup until windows are layed out correctly
  autocmd VimEnter * call g:SetupMergetool()
endif
