" TODO:s
" sort out the git origin checking and formatting/compilation
" - options depending on git repo and path and file-type
" - color background according to current files git repo? color files outside current repo?
" where to store custom compiler 'plugins'?
" - compiler configs are sort-of repo- or project-specific
" - keep them on github or not?
" automatic tags generation??

" this old friend goes first in every dotvimrc, for sentimental reasons <3
set nocp

" some handy paths
let g:configsPath = expand("<sfile>:h:h")

" plugins
exec "set runtimepath+=" . g:configsPath . "/dotvim"
exec "set runtimepath+=" . g:configsPath . "/submodules/vim-fugitive"
exec "set runtimepath+=" . g:configsPath . "/submodules/vim-bitbake"
exec "set runtimepath+=" . g:configsPath . "/submodules/vim-clang"
exec "set runtimepath+=" . g:configsPath . "/submodules/vim-rtags"

" we add on gui stuff when/if we enter gui
au GuiEnter * exec "source " . g:configsPath . "/dotvim/gvimrc"

" Global extras
runtime ftplugin/man.vim
if has("packages")
  packadd termdebug
  packadd cfilter
endif

" Local extras (from configs repo)
runtime emacs-keymappings-for-command-editing.vim
runtime right-click-menu.vim
runtime git-mergetool-tweaks.vim

function WindowsPerTab()
  let tmp = map(gettabinfo(),'len(v:val["windows"])')
  return join(tmp, ' ')
endfunc

function GitRepoOrCWD()
  " XXX g:GitTopLevel() messes with terminal. use fugitive for now i guess.
  let tmp = FugitiveWorkTree()
  if tmp == ''
    return getcwd()
  else
    return '<' . fnamemodify(tmp, ':t') . '>'
  endif
endfunc

" X window title / task bar text (also for console mode!)
set iconstring=VIM:\ %t
set titlestring=VIM:\ [%{WindowsPerTab()}]\ %{GitRepoOrCWD()}
set title
set icon

" statusline / command interface related stuff
set statusline=%<%f\ %h%m%r%=%n\ %-14.(%l,%c%V%)\ %P
set laststatus=2 ruler showcmd wildmenu

set backspace=2

set splitright

" search is case insensitive unless the search pattern contains capital letters
set ignorecase smartcase

" vims autoindent defaults are mostly sane but for switch cases it needs correction!
set cinoptions=l1

set mouse=a
set sessionoptions+=resize,localoptions
set autowrite

set cscopequickfix=s-,c-,d-,i-,t-,e-

" syntax plugin options
let g:is_bash = 1
let g:load_doxygen_syntax = 1

" clang plugin options
let g:clang_auto=0
let g:clang_verbose_pmenu=1
let g:clang_c_completeopt="longest,menuone,preview"

syn on

"if $TERM == "xterm-256color"
  "colorscheme siennaterm
"endif

set background=dark
colorscheme solarized

" set xterm cursor 'color' to value "XtDefaultBackground"
" without it the cursor is white which sucks
" "\e]12;XtDefaultBackground^G"
silent !echo -en '\e]12;XtDefaultForeground\a'
" make cursor blink upon startup
silent !echo -en '\e[1 q'
" output '<CSI>5 q' (set cursor to blinking solid block) when exiting insert-mode
let &t_EI="\<Esc>[1 q"
" output '<CSI>5 q' (set cursor to blinking bar) when entering insert-mode
let &t_SI="\<Esc>[5 q"
" timeout for waiting for complete key-codes from terminal.
" the default value is 1000 which makes vim wait a full second from pressing
" escape until it exits insert-mode.
" timeoutlen is used for command line and <Leader> maps
" ttimeoutlen is for normal editing
set timeout timeoutlen=500 ttimeout ttimeoutlen=20

" enable syntax-sensitive folding
set foldmethod=syntax foldcolumn=2 foldlevel=10
filetype on
filetype plugin on
filetype indent on

" ### Stuff related to whitespace and special characters begin here ###

let &listchars="tab:â€£\ " "set this one using let so it doesn't show up as a space error!
set list

" Stuff that we always want to do when a new window is created
" TODO: disable/enable EOL-space error while typing (?)
" XXX this adds additional autocommands every time this file is reloaded. FIXME!
au VimEnter * call g:InitWindow(expand("<afile>"), expand("<amatch>"))
au WinEnter * call g:InitWindow(expand("<afile>"), expand("<amatch>"))
function! g:InitWindow(filename, pattern)
  if exists('w:is_initialised')
    return
  endif
  let w:is_initialised = 1
  call matchadd("Error", "\\s\\+$") " whitespace at EOL is bad
  call matchadd("Error", " \\+\t")  " space before tab is bad
endfunction

function! g:ToggleListCharsEOL()
  let oldval = &listchars
  if match(oldval, 'eol') > -1
    exec 'set listchars-=eol:$'
  else
    exec 'set listchars+=eol:$'
  endif
endfunction

cscope add /repo/hans/slask/.git/cscope.out /repo/hans/slask

nnoremap <F12> :set hls!<CR>
inoremap <F12> <C-o>:set hls!<CR>
nnoremap <expr> <S-F12> g:ToggleListCharsEOL()
inoremap <expr> <S-F12> g:ToggleListCharsEOL()
nnoremap <C-F12> :set spell!<CR>
inoremap <C-F12> <C-o>:set spell!<CR>
nnoremap <F11> :setlocal number!<CR>
nnoremap <S-F11> :setlocal relativenumber!<CR>
nnoremap <C-F11> :setlocal wrap!<CR>

nnoremap <C-S-F11> :setlocal buftype=nofile<CR>

nnoremap <F9> :make<CR>
if has("terminal")
  nnoremap <F9> :Tmake<CR>
  nnoremap <S-F9> :Trun<CR>
else
  nnoremap <F9> :make<CR>
endif

inoremap <F9> <C-o>:make!<CR><CR>
nnoremap <F10> :call DmenuMakeTarget()<CR>
" lets use dmenu for buffer nagivation!
" let mybufs = map(filter(range(1, bufnr('$')), " 'buflisted(v:val)'),'bufname(v:val)')
" bufname = call system("dmenu", join(mybufs, "\n"))
"
nnoremap <F7> :cprev<CR>
inoremap <F7> <C-o>:cprev<CR>
nnoremap <F8> :cnext<CR>
inoremap <F8> <C-o>:cnext<CR>

map <F2>g :cs find g <cword><CR>
map <F2>s :cs find s <cword><CR>
map <F2>c :cs find c <cword><CR>
map <F2>t :cs find t <cword><CR>
map <F2>d :cs find d <cword><CR>

map <Leader>G :tab split +:Ggrep\ <cword><CR>
map <Leader>g :tab split +:Ggrep\\\ 

map <F3> :call DmenuFile("edit")<CR>
map <S-F3> :call DmenuFile("vsplit")<CR>
map <C-F3> :call DmenuFile("tabedit")<CR>
map <F4> :call DmenuTag("tag")<CR>
map <S-F4> :call DmenuTag("tjump")<CR>
cmap <F3> =CallDmenu("git ls-files --full-name ". g:GitTopLevel())<CR>

map <F6> :let kalle="vert stag ".expand('<cword>')<CR>:exec kalle<CR>
map <S-F6> :let kalle="tab stag ".expand('<cword>')<CR>:exec kalle<CR>

cmap <F8> <C-r>=g:GitTop<CR>

nnoremap <S-F7> :set foldlevel-=1<CR>
nnoremap <S-F8> :set foldlevel+=1<CR>
nnoremap <C-S-F7> :set foldlevel=0<CR>
nnoremap <C-S-F8> :set foldlevel=99<CR>

" the following works only if xterm mappings have been set up in Xresources
map <Esc>[64~ <C-I>
map <Esc>[65~ <C-O>

vnoremap <Leader>f          <Esc>:call SearchForVisualSelection(0)<CR>
vnoremap <Leader>F          <Esc>:call SearchForVisualSelection(1)<CR>
function! SearchForVisualSelection(backward)
  let [l:lnum1, l:col1] = getpos("'<")[1:2]
  let [l:lnum2, l:col2] = getpos("'>")[1:2]
  if lnum1 != lnum2
    echohl ErrorMsg
    echo 'Multiple lines marked'
    echohl None
    return
  endif

  let l:sel = getline(lnum1)[ col1 - 1 : col2 - 1]
  let l:searchchar = '/'
  if a:backward == 1
    let l:searchchar = '?'
    call cursor(l:lnum1, l:col1)
  endif

  " feedkeys() inputs gets evaluated after a function returns so it can be used
  " to get around the ":help function-search-undo" problem which is that
  " last-search pattern and last-search direction is reset when returning
  " from a function.
  " using ":normal /pat<CR>" did not work and neither did search() and/or
  " assigning to the "/ register.
  call feedkeys(l:searchchar . l:sel . "\<CR>")
endfunction

set includeexpr=g:IncludeExprExample(v:fname)
function! g:IncludeExprExample(in)
  let top = g:GitTopLevel()
  let t2=substitute(a:in,'^b/',top,'g')
  let t=substitute(t2,'^a/',top,'g')
"  let t2=substitute(t,'^/',top . '/','g')
  return t2
endfunction

command! ToggleQuickFix :call ToggleQuickFix()
function! ToggleQuickFix()
  if len(filter(range(1, winnr('$')), 'getwinvar(v:val, "&ft") == "qf"')) == 0
    copen
  else
    cclose
  endif
endfunc

" XXX add dmenu options as arguments. ?? literal options or one arg per option?
function! CallDmenu(system_cmd)
  if g:dmenucmd == 'false'
    echom "Dmenu not found"
    return
  endif
  let fname = system("set -o pipefail ; " . a:system_cmd . " | " . g:dmenucmd . g:GetDmenuOptions())
  if v:shell_error != 0
    echom fname
    return ""
  endif

"  Xlib:  extension "XINERAMA" missing on display ":1011.0"
  let fname2 = substitute(fname, '\n$', '', '')
  " first substitute in the case of two "lines" (<CR> or NULL character present at the end)
  let fname = substitute(fname2, "Xlib:  extension \"XINERAMA\" missing.*\".*.\"\..", '', '')
  " the first pattern will not cover the case of one line, hence another substitute
  let fname = substitute(fname, "Xlib:  extension \"XINERAMA\" missing.*\".*.\"\.", '', '')

  if empty(fname)
    return ""
  endif

  return split(fname, " ")[0]
endfunction

function! GetDmenuVersion(cmd)
  let tmp = system(a:cmd . " -v")
  if v:shell_error != 0
    return [0, 0]
  else
    let tmp2 = substitute(tmp, "^dmenu-", "", "")
    return [str2nr(tmp2[0]), str2nr(tmp2[2])]
  endif
endfunction

function! g:GetDmenuOptions()
  if g:dmenuversion[0] >= 4 && g:dmenuversion[1] >= 7
    return " -i -l 50 -p '' -w " . $WINDOWID
  else
    return " -i -l 50 -p ''"
  endif
endfunction

let system_dmenu_path = "dmenu"
let local_dmenu_path = expand("<sfile>:h:h") . "/submodules/dmenu/dmenu"

let system_dmenu_version = GetDmenuVersion(system_dmenu_path)
let local_dmenu_version = GetDmenuVersion(local_dmenu_path)

let g:dmenucmd="false"
if system_dmenu_version[0] == local_dmenu_version[0]
  if system_dmenu_version[1] == local_dmenu_version[1]
    if system_dmenu_version[0] == 0 && system_dmenu_version[1] == 0
      " versions are equal and = 0.0. no dmenu available :(
      let g:dmenucmd="false"
    else
      " versions are equal and both are runnable. pick system dmenu
      let g:dmenucmd=system_dmenu_path | let g:dmenuversion=system_dmenu_version
    endif
  elseif system_dmenu_version[1] > local_dmenu_version[1]
    let g:dmenucmd=system_dmenu_path | let g:dmenuversion=system_dmenu_version
  else
    let g:dmenucmd=local_dmenu_path | let g:dmenuversion=local_dmenu_version
  endif
elseif system_dmenu_version[0] > local_dmenu_version[0]
  let g:dmenucmd=system_dmenu_path | let g:dmenuversion=system_dmenu_version
else
  let g:dmenucmd=local_dmenu_path | let g:dmenuversion=local_dmenu_version
endif

" Find a tag and pass it to cmd
" XXX TODO get more fields from dumptags.
" implement jumping to the correct tag definition (in case there are many) based on which one was chosen
" or just filter the tag list to avoid duplicates being displayed in dmenu and
" then call tselect??
function! DmenuTag(cmd)
  let tagname = CallDmenu("~/configs/c-programs/dumptags -t " . g:GitDir() . "/tags -l")
  if tagname == ""
    return
  endif

  execute a:cmd . " " . tagname
endfunction

" Find a file and pass it to cmd
function! DmenuMakeTarget()
  let targ = CallDmenu("~/configs/list-make-targets $MAKEARGS")
  if targ == ""
    return
  endif

  let $MAKETARGET=targ
endfunction

" Find a file and pass it to cmd
function! DmenuFile(cmd)
  let fname = CallDmenu("git ls-files --full-name " . g:GitTopLevel())
  if fname == ""
    return
  endif

  execute a:cmd . " " . g:GitTopLevel() . "/" . fname
endfunction

function! g:SystemList(cmd)
  let out = system(a:cmd)
  return split(out, '\n')
endfunction

" get .git dir
function! g:GitDir()
  " systemlist() seems like a convenient way to get rid of the newline in the
  " output from the git command
  let git_output = g:SystemList("git rev-parse --git-dir")
  if v:shell_error == 0
    return git_output[0]
  endif
  return ''
endfunction

" get git top-level dir
function! g:GitTopLevel()
  " systemlist() seems like a convenient way to get rid of the newline in the
  " output from the git command
  let git_output = g:SystemList("git rev-parse --show-toplevel")
  if v:shell_error == 0
    return git_output[0]
  endif
  return ''
endfunction

function! g:GitUniqueId()
  let git_output = g:SystemList("git remote get-url origin")
  if v:shell_error == 0
    return git_output[0]
  endif
  return ''
endfunction

let g:GitTop = g:GitTopLevel()
if g:GitTop != ''
  exec 'set path+=' . g:GitTop
endif
silent !echo -en '\e[1 q'
